//
//  main.c
//  rpn
//
//  Created by William McCarthy on 192//20.
//  Copyright Â© 2020 William McCarthy. All rights reserved.
//
#include <math.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAXOP   100    /* max size of operand/operator */
#define NUMBER '0'     /* signal that a number was found */
#define MAXVAL  100
#define NAME 'n' // signal name was found

size_t sp = 0;   // aka unsigned long -- printf using %zu
double val[MAXVAL];   // stack of values

char buf[BUFSIZ];
size_t bufp = 0;

int getch_(void) { return (bufp > 0) ? buf[--bufp] : getchar(); }
void ungetch_(int c) {
  if (bufp >= BUFSIZ) { fprintf(stderr, "ungetch: too many characters\n");  return; }
  buf[bufp++] = c;
}

int getop(char* s) {
  int i, c;
  while ((s[0] = c = getch_()) == ' ' || c == '\t') { }  // skip whitespace
  s[1] = '\0';
  i = 0;
  if (!isdigit(c) && c != '.'&&c!='-') { return c; }  // if not a digit, return
if(c=='-'){
if(isdigit(c=getch_())||c=='.'){
s[++i]=c;
}else{
  if(c!=EOF){
  ungetch_(c);
  return '-';
  }
  }

}
  
  if (isdigit(c)) {  // get digits before '.'
    while (isdigit(s[++i] = c = getch_())) { }
  }
  if (c == '.') {    // get digits after decimal (if any)
    while (isdigit(s[++i] = c = getch_())) { }
  }
  s[i] = '\0';
  if (c != EOF) { ungetch_(c); }
  return NUMBER;      // return type is NUMBER, number stored in s
}

double pop(void) {
  if (sp == 0) { fprintf(stderr, "stack underflow\n");  return 0.0; }
  return val[--sp];
}

void push(double f) {
  if (sp == MAXVAL) { fprintf(stderr, "stack overflow -- can't push %g\n", f);  return; }
  val[sp++] = f;
}
void clear(void){
sp=0;
}
void rpn(void) {

  double op2,op1, v;
  char s[BUFSIZ];
  int i, type, var = 0;
double variable[26];
for(i=0; i<26;i++)
variable[i]=0.0;
  while ((type = getop(s)) != EOF) {
    switch(type) {
      case '\n':    v= pop();
      printf("\t%.8g\n", v);
      break;
      case NUMBER:  push(atof(s));              break;
      case '+':     push(pop() + pop());        break;
      case '*':     push(pop() * pop());        break;
      case '-':     push(-(pop() - pop()));     break;
      case '/':
        if ((op2 = pop()) == 0.0) { fprintf(stderr, "divide by zero\n");  break; }
        push(pop() / op2);
        break;
        case '%': op2 = pop();
        if(op2!=0.0)
        push(fmod(pop(),op2));
        else
        printf("error:zero division\n");
        break;
        case '?': //prints top element of stack
        op2 = pop();
        printf("\t%.8g\n",op2);
        push(op2);
        break;
        case 'c': //clears the stack
        clear();
        break;
        case 'd': //duplicate top elem of the stack
        op2 = pop();
        push(op2);
        push(op2);
        break;
        case 's': //swap the top elements
        op1 = pop();
        op2 = pop();
        push(op1);
        push(op2);
        break;
        case '=':
        pop();
        if(var >= 'A'&&var <= 'Z')
        {
          variable[var- 'A']= pop();
          else{
            printf("error:no variables names \n");
          }
        
        }
        break;
      default: 
      if(type >= 'A'&&type <= 'Z'){
        push(variable(type - 'A'));
      }     
      else if(type == 'v'){
        push(v);
      }
      else{
      fprintf(stderr, "unknown command %s\n", s);  
      break;
     }
     var = type;
    }
return 0;
  }
}

void mathfnc(char s[]){
  double op2;
  if(strcmp(s,"sin")==0)
  {
    push(sin(pop()));
  }
  else if(strcmp(s,"cos")==0)
  {
    push(cos(pop()));
  }
   else if(strcmp(s,"exp")==0)
  {
    push(exp(pop()));
  }
    else if(strcmp(s,"pow")==0)
  {
   op2 = pop();
  }else{
    printf("error %s not supported\n",s);
  }
}
int main(int argc, const char * argv[]) {
  rpn();

  return 0;
}
